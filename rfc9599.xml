<?xml version='1.0' encoding='UTF-8'?>

<!DOCTYPE rfc [
 <!ENTITY nbsp    "&#160;">
 <!ENTITY zwsp   "&#8203;">
 <!ENTITY nbhy   "&#8209;">
 <!ENTITY wj     "&#8288;">
]> 

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" category="bcp" consensus="true" docName="draft-ietf-tsvwg-ecn-encap-guidelines-22" number="9599" ipr="trust200902" updates="3819" obsoletes="" submissionType="IETF" xml:lang="en" tocInclude="true" symRefs="true" sortRefs="true" version="3">

  <front>
<!-- [rfced] We note that the short title of this document is "ECN
Encapsulation Guidelines". To match the short title, should we update the
title of the document as follows to include "ECN"?

Original: 
Guidelines for Adding Congestion Notification to Protocols that
Encapsulate IP

Perhaps: 
Guidelines for Adding Explicit Congestion Notification (ECN) to
Protocols That Encapsulate IP
-->
<title abbrev="ECN Encapsulation Guidelines">Guidelines for Adding
    Congestion Notification to Protocols That Encapsulate IP</title>
    <seriesInfo name="RFC" value="9599"/>
    <seriesInfo name="BCP" value="89"/>
    <author fullname="Bob Briscoe" initials="B." surname="Briscoe">
      <organization>Independent</organization>
      <address>
        <postal>
          <country>United Kingdom</country>
        </postal>
        <email>ietf@bobbriscoe.net</email>
        <uri>https://bobbriscoe.net/</uri>
      </address>
    </author>
    <author fullname="John Kaippallimalil" initials="J." surname="Kaippallimalil">
      <organization>Futurewei</organization>
      <address>
        <postal>
          <street>5700 Tennyson Parkway, Suite 600</street>
          <city>Plano</city>
          <region>Texas</region>
          <code>75024</code>
          <country>United States of America</country>
        </postal>
        <email>kjohn@futurewei.com</email>
      </address>
    </author>

    <date month="June" year="2024"/>

    <area>WIT</area>
    <workgroup>tsvwg</workgroup>
    <keyword>Congestion Control and Management</keyword>
    <keyword>Congestion Notification</keyword>
    <keyword>Information Security</keyword>
    <keyword>Tunnelling</keyword>
    <keyword>Encapsulation</keyword>
    <keyword>ECNDecapsulation</keyword>
    <keyword>Protocol</keyword>
    <keyword>ECN</keyword>
    <keyword>Layering</keyword>

    <abstract>
<!-- [rfced] May we rephrase the following sentence to match what appears in
the short title and proposed document title?

Original:
   The purpose of this document is to guide the design of congestion
   notification in any lower layer or tunnelling protocol that
   encapsulates IP.

Perhaps: 
   The purpose of this document is to guide the design of Explicit
   Congestion Notification (ECN) in any lower-layer or tunneling protocol 
   that encapsulates IP.
-->
      <t>The purpose of this document is to guide the design of congestion
      notification in any lower-layer or tunnelling protocol that encapsulates
      IP. The aim is for explicit congestion signals to propagate consistently
      from lower-layer protocols into IP. 

<!-- [rfced] FYI, "congestion notification" has been made plural in 
instances where it seems to refer to notifications rather than the 
mechanism; here is an example. Please review. (We note there were 
4 instances of plural in the original.)

Original: 
   Then the
   IP internetwork layer can act as a portability layer to carry
   congestion notification from non-IP-aware congested nodes up to the
   transport layer (L4)

Current:
   Then, the IP internetwork layer can act as a portability layer to
   carry congestion notifications from non-IP-aware congested nodes up to the
   transport layer (L4).
-->
Then, the IP internetwork layer can act as a portability layer to carry
congestion notification from non-IP-aware congested nodes up to the transport
layer (L4). Following these guidelines should assure interworking among IP
layer and lower-layer congestion notification mechanisms specified by the IETF
or other standards bodies. This document is included in BCP 89 and updates the
single paragraph of advice to subnetwork designers about Explicit Congestion
Notification (ECN) in Section 13 of RFC 3819 by replacing it with a reference
to this document.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="ecnencap_Introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>The benefits of Explicit Congestion Notification (ECN) described in
      <xref target="RFC8087" format="default"/> and summarized below can only be fully realized
      if support for congestion notification is added to the relevant subnetwork technology, as
      well as to IP. When a lower-layer buffer drops a packet, it obviously 
      does not just drop at that layer; the packet disappears from all layers.
      In contrast, when active queue management (AQM) at a lower layer notifies congestion by marking a
      packet, the marking needs to be explicitly propagated up the
      layers. The same is true if AQM marks the outer header of a packet that
      encapsulates inner tunnelled headers. Forwarding ECN is not as
      straightforward as other headers because it has to be assumed ECN may be
      only partially deployed. If a lower-layer header that contains
      congestion indications is stripped off by a subnet egress that is not
      ECN-aware, or if the ultimate receiver or sender is not ECN-aware,
      congestion needs to be indicated by dropping the packet, not marking
      it.</t>
<!-- [rfced] How may this sentence be rephrased for clarity?
Specifically, what does "it" refer to in "it will propagate"?

Original:
   The purpose of this document is to guide the addition of congestion
   notification to any subnet technology or tunnelling protocol, so that
   lower layer AQM algorithms can signal congestion explicitly and it
   will propagate consistently into encapsulated (higher layer) headers,
   otherwise the signals will not reach their ultimate destination.

Perhaps:
   The purpose of this document is to guide the addition of congestion
   notifications to any subnet technology or tunnelling protocol so that
   lower-layer AQM algorithms can signal congestion explicitly and that signal
   can be propagated consistently into encapsulated (higher-layer)
   headers. Otherwise, the signals will not reach their ultimate destination.
-->
<t>The purpose of this document is to guide the addition of congestion
      notification to any subnet technology or tunnelling protocol so that
      lower-layer AQM algorithms can signal congestion explicitly and that signal will
      propagate consistently into encapsulated (higher-layer) headers;
      otherwise, the signals will not reach their ultimate destination.</t>
      <t>ECN is defined in the IP header (IPv4 and IPv6) <xref target="RFC3168" format="default"/>
      to allow a resource to notify the onset of queue buildup without having
      to drop packets by explicitly marking a proportion of packets with the
      congestion experienced (CE) codepoint.
<!-- [rfced] Some author comments are present in the XML. Please confirm that
no updates related to these comments are outstanding. Note that the
comments will be deleted prior to publication.
-->
      </t>
      <t>Given a suitable marking scheme, ECN removes nearly all congestion
      loss and it cuts delays for two main reasons: </t>
      <ul spacing="normal">
        <li>It avoids the delay when recovering from congestion losses, which
          particularly benefits small flows or real-time flows, making their
          delivery time predictably short <xref target="RFC2884" format="default"/>.</li>
        <li>As ECN is used more widely by end systems, it will gradually
          remove the need to configure a degree of delay into buffers before
          they start to notify congestion (the cause of bufferbloat). 

This is
          because drop involves a trade-off between sending a timely signal
          and trying to avoid impairment, whereas ECN is solely a signal and not
          an impairment, so there is no harm triggering it earlier.</li>
      </ul>
      <t>Some lower-layer technologies (e.g., MPLS, Ethernet) are used to form
      subnetworks with IP-aware nodes only at the edges. These networks are
      often sized so that it is rare for interior queues to overflow. However,
      until recently, this was more due to the inability of TCP to saturate the
      links. For many years, fixes such as window scaling <xref target="RFC7323" format="default"/> proved hard to deploy. The Reno variant of TCP
      has remained in widespread use despite its inability to scale to high
      flow rates. However, now that modern operating systems are finally
      capable of saturating interior links, even the buffers of
      well-provisioned interior switches will need to signal episodes of
      queuing.</t>
      <t>Propagation of ECN is defined for MPLS <xref target="RFC5129" format="default"/> and TRILL <xref target="RFC7780" format="default"/> <xref target="RFC9600" format="default"/>, but it has yet to be defined for
      a number of other subnetwork technologies.</t>
      <t>Similarly, ECN propagation is yet to be defined for many tunnelling
      protocols. <xref target="RFC6040" format="default"/> defines how ECN should be propagated
      for IP-in-IPv4 <xref target="RFC2003" format="default"/>, IP-in-IPv6 <xref target="RFC2473" format="default"/>, and IPsec <xref target="RFC4301" format="default"/> tunnels, but there
      are numerous other tunnelling protocols with a shim and/or a Layer 2 (L2)
      header between two IP headers (IPv4 or IPv6). Some address ECN propagation
      between the IP headers, but many do not. 
<!--[rfced] Please clarify "IP-shim-(L2)-IP protocols".
How may it be written out? Based on the preceding text, 
perhaps L2 is in parentheses to indicate that it is an option.

Current:
   This document gives guidance on how to address ECN propagation for
   future tunnelling protocols, and a companion Standards Track
   specification [RFC9601] updates existing IP-shim-(L2)-IP protocols
   that are under IETF change control and still widely used.

We note that RFC-to-be 9601 only used the term "IP-shim-(L2)-IP"
in the abbreviated title. Perhaps this shorthand means 
"IP-shim-IP or IP-L2-IP" or "IP-in-IP tunnels that rely on 
shim headers or L2 protocols" or otherwise.
-->


This document gives guidance on
      how to address ECN propagation for future tunnelling protocols, and a
      companion Standards Track specification <xref target="RFC9601" format="default"/> updates existing
      IP-shim-(L2)-IP protocols that are under IETF change control and still
      widely used.</t>
      <t>Incremental deployment is the most delicate aspect when adding
      support for ECN. The original ECN protocol in IP <xref target="RFC3168" format="default"/> was carefully designed so that a congested buffer
      would not mark a packet (rather than drop it) unless both source and
      destination hosts were ECN-capable. Otherwise, its congestion markings
      would never be detected and congestion would just build up further.
      However, to support congestion marking below the IP layer or within
      tunnels, it is not sufficient to only check that the two layer 4 
      transport endpoints support ECN; correct operation also depends on the
      decapsulator at each subnet or tunnel egress faithfully propagating
      congestion notification to the higher layer. 
<!-- [rfced] Should "outer" read as "outer header" here for clarity?

Original: 
Otherwise, a legacy decapsulator might silently fail to propagate
any ECN signals from the outer to the forwarded header.

Perhaps: 
Otherwise, a legacy decapsulator might silently fail to propagate any
ECN signals from the outer header to the forwarded header.
-->
Otherwise, a legacy decapsulator might silently fail to propagate any congestion
signals from the outer to the forwarded header. Then, the lost signals would
never be detected and congestion would build up further. The guidelines given
later require protocol designers to carefully consider incremental deployment
and suggest various safe approaches for different circumstances.</t>
 <t>Of
course, the IETF does not have standards authority over every link-layer
protocol; thus, this document gives guidelines for designing propagation of
congestion notification across the interface between IP and protocols that may
encapsulate IP (i.e., that can be layered beneath IP). Each lower-layer
technology will exhibit different issues and compromises, so the IETF or the
relevant standards body must be free to define the specifics of each lower-layer congestion notification scheme.  Nonetheless, if the guidelines are
followed, congestion notification should interwork between different
technologies using IP in its role as a 'portability layer'.</t>
      <t>Therefore, the capitalized terms '<bcp14>SHOULD</bcp14>' or '<bcp14>SHOULD NOT</bcp14>' are often
      used in preference to '<bcp14>MUST</bcp14>' or '<bcp14>MUST NOT</bcp14>' because it is difficult to
      know the compromises that will be necessary in each protocol design. If
      a particular protocol design chooses not to follow a '<bcp14>SHOULD</bcp14>' or '<bcp14>SHOULD NOT</bcp14>'
      given in the advice below, it <bcp14>MUST</bcp14> include a sound justification.</t>
      <t>It has not been possible to give common guidelines for all
      lower-layer technologies because they do not all fit a common pattern.

<!-- [rfced] We note that the "feed-forward-and-upward" and
"feed-upward-and-forward" modes of operation in this sentence are
otherwise consistently referred to as "feed-forward-and-up" and
"feed-up-and-forward" in the document. FYI, we have updated this sentence 
for consistency. Please let us know if that is not accurate.

Original: 
Instead, they have been divided into a few distinct modes of
operation: feed-forward-and-upward; feed-upward-and-forward; feed-backward;
and null mode.

Current: 
Instead, they have been divided into a few distinct modes of
operation: feed-forward-and-up, feed-up-and-forward, feed-backward, and null
mode.
-->

Instead, they have been divided into a few distinct modes of
      operation: feed-forward-and-up, feed-up-and-forward,
      feed-backward, and null mode. These modes are described in <xref
      target="ecnencap_Modes" format="default"/>, and separate guidelines are
      given for each mode in subsequent sections.</t>

      <section numbered="true" toc="default">
        <name>Update to RFC 3819</name>
        <t>This document updates the brief advice to subnetwork designers
        about ECN in <xref section="13" target="RFC3819" format="default"/> by adding this document (RFC 9599) as an informative reference and replacing the
        last two paragraphs with the following sentence:</t>
<blockquote>
            By following the guidelines in [RFC9599], subnetwork
            designers can enable a layer-2 protocol to participate in
            congestion control without dropping packets via propagation of
            Explicit Congestion Notification (ECN) <xref target="RFC3168" format="default"/> to
            receivers.</blockquote>
      </section>
      <section anchor="ecnencap_Scope" numbered="true" toc="default">
        <name>Scope</name>
<!-- [rfced] May we rephrase "explicit notification of congestion" as follows?

Original: 
This document only concerns wire protocol processing of explicit
notification of congestion.

Perhaps: 
This document only concerns wire protocol processing of ECN.
-->
        <t>This document only concerns wire protocol processing of explicit
        notification of congestion. It makes no changes or recommendations
        concerning algorithms for congestion marking or congestion
        response because algorithm issues should be independent of the layer
        that the algorithm operates in.</t>
        <t>The default ECN semantics are described in <xref target="RFC3168" format="default"/>
        and updated by <xref target="RFC8311" format="default"/>. Also, the guidelines for Active Queue Management (AQM)
        designers <xref target="RFC7567" format="default"/> clarify the semantics of both drop
        and ECN signals from AQM algorithms. <xref target="RFC4774" format="default"/> is the
        appropriate best current practice specification of how algorithms with
        alternative semantics for the ECN field can be partitioned from
        Internet traffic that uses the default ECN semantics. There are two
        main examples for how alternative ECN semantics have been defined in
        practice:</t>
        <ul spacing="normal">
          <li><xref target="RFC4774"/> suggests using the ECN field in combination with a
            Diffserv codepoint, such as in Pre-Congestion Notification (PCN) <xref target="RFC6660" format="default"/>, Voice
            over 3G <xref target="UTRAN" format="default"/>, or Voice over LTE (VoLTE) <xref target="LTE-RA" format="default"/>.</li>
          <li><xref target="RFC8311"/> suggests using the ECT(1) codepoint of the ECN field
            to indicate alternative semantics, such as for the experimental Low
            Latency, Low Loss, and Scalable throughput (L4S) service <xref target="RFC9331" format="default"/>).</li>
        </ul>

        <t>The aim is that the default rules for encapsulating and
        decapsulating the ECN field are sufficiently generic that tunnels and
        subnets will encapsulate and decapsulate packets without regard to how
        algorithms elsewhere are setting or interpreting the semantics of the
        ECN field. <xref target="RFC6040" format="default"/> updates <xref target="RFC4774"/> to allow
        alternative encapsulation and decapsulation behaviors to be defined
        for alternative ECN semantics. However, it reinforces the same point --
        it is far preferable to try to fit within the common ECN
        encapsulation and decapsulation behaviors because expecting all
        lower-layer technologies and tunnels to be updated is likely to be
        completely impractical.</t>
        <t>Alternative semantics for the ECN field can be defined to depend on
        the traffic class indicated by the Differentiated Services Code Point (DSCP). Therefore, correct propagation
        of congestion signals could depend on correct propagation of the DSCP
        between the layers and along the path. For instance, if the meaning of
        the ECN field depends on the DSCP (as in PCN or VoLTE) and the
        outer DSCP is stripped on descapsulation, as in the pipe model of
        <xref target="RFC2983" format="default"/>, the special semantics of the ECN field would
        be lost. Similarly, if the DSCP is changed at the boundary between
        Diffserv domains, the special ECN semantics would also be lost. This
        is an important implication of the localized scope of most Diffserv
        arrangements. In this document, correct propagation of traffic class
        information is assumed while the meaning of 'correct' and how it is
        achieved is covered elsewhere (e.g., <xref target="RFC2983"/>) and is outside the scope
        of this document.</t>
        <t>The guidelines in this document do ensure that common encapsulation
        and decapsulation rules are sufficiently generic to cover cases where
        ECT(1) is used instead of ECT(0) to identify alternative ECN semantics
        (as in L4S <xref target="RFC9331" format="default"/>) and where ECN-marking algorithms
        use ECT(1) to encode three severity levels into the ECN field (e.g., PCN
        <xref target="RFC6660" format="default"/>) rather than the default of two. All these
        different semantics for the ECN field work because it has been
        possible to define common default decapsulation rules that allow for
        all cases.</t>
        <t>Note that the guidelines in this document do not necessarily
        require the subnet wire protocol to be changed to add support for
        congestion notification. For instance, the feed-up-and-forward mode
        (<xref target="ecnencap_Up" format="default"/>) and the null mode (<xref target="ecnencap_Null" format="default"/>) do not. Another way to add congestion
        notification without consuming header space in the subnet protocol
        might be to use a parallel control plane protocol.</t>
        <t>This document focuses on the congestion notification interface
        between IP and lower-layer or tunnel protocols that can encapsulate
        IP, where the term 'IP' includes IPv4 or IPv6, unicast, multicast, or
        anycast. 
<!-- [rfced] We note that "previously 802.1ah", "previously 802.1p", and
"previously known as 802.1Qau" is written in instances where [IEEE802.1Q]
is cited throughout the document (see below for an example). Is the added 
context necessary for readers to understand the text? If not, we suggest 
referencing the most up-to-date material and removing "previously X" from 
each citation of [IEEE802.1Q]. See below for an example.

Original (Section 1.2): 
However, it is likely that the guidelines will also be
useful when a lower layer protocol or tunnel encapsulates itself, e.g.
Ethernet MAC in MAC ([IEEE802.1Q]; previously 802.1ah) or when it encapsulates
other protocols.

Perhaps: 
However, it is likely that the guidelines will also be useful when a
lower-layer protocol or tunnel encapsulates itself, e.g., Ethernet Media
Access Control (MAC) in MAC [IEEE802.1Q], or when it encapsulates other
protocols.
-->
However, it is likely that the guidelines will also be useful
        when a lower-layer protocol or tunnel encapsulates itself, e.g.,
        Ethernet Media Access Control (MAC) in MAC (<xref target="IEEE802.1Q" format="default"/>; previously 802.1ah),
        or when it encapsulates other protocols. In the feed-backward mode,
        propagation of congestion signals for multicast and anycast packets is
        out of scope (because the complexity would make it unlikely to be
        attempted).</t>
      </section>
    </section>
    <section anchor="ecnencap_Reqs_Language" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>",
      "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>", "<bcp14>MAY</bcp14>", and
      "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as described in
      BCP&nbsp;14 <xref target="RFC2119" format="default"/>
      <xref target="RFC8174" format="default"/> when, and only when, they
      appear in all capitals, as shown here.</t>
      <t>Further terminology used within this document:</t>
      <dl newline="false" spacing="normal">
        <dt>Protocol data unit (PDU):</dt>
        <dd>Information that is
          delivered as a unit among peer entities of a layered network
          consisting of protocol control information (typically a header) and
          possibly user data (payload) of that layer. The scope of this
          document includes Layer 2 and Layer 3 networks, where the PDU is
          respectively termed a frame or a packet (or a cell in ATM). PDU is a
          general term for any of these. This definition also includes a
          payload with a shim header lying somewhere between layer 2 and
          3.</dd>
        <dt>Transport:</dt>
        <dd>The end-to-end transmission control function, conventionally
        considered at layer 4 in the OSI reference model. Given the audience
        for this document will often use the word transport to mean low-level
        bit carriage, the term will be qualified whenever it is used,
        e.g., 'L4 transport'.</dd>
        <dt>Encapsulator:</dt>
        <dd>The link or tunnel endpoint function
          that adds an outer header to a PDU (also termed the 'link ingress',
          the 'subnet ingress', the 'ingress tunnel endpoint', or just the
          'ingress' where the context is clear).</dd>
        <dt>Decapsulator:</dt>
        <dd>The link or tunnel endpoint function
          that removes an outer header from a PDU (also termed the 'link
          egress', the 'subnet egress', the 'egress tunnel endpoint', or just
          the 'egress' where the context is clear).</dd>
        <dt>Incoming header:</dt>
        <dd>The header of an arriving PDU before
          encapsulation.</dd>
        <dt>Outer header:</dt>
        <dd>The header added to encapsulate a
          PDU.</dd>
        <dt>Inner header:</dt>
        <dd>The header encapsulated by the outer
          header.</dd>
        <dt>Outgoing header:</dt>
        <dd>The header forwarded by the
          decapsulator.</dd>
        <dt>CE:</dt>
        <dd>Congestion Experienced <xref target="RFC3168" format="default"/></dd>
        <dt>ECT:</dt>
        <dd>ECN-Capable (L4) Transport <xref target="RFC3168" format="default"/></dd>
        <dt>Not-ECT:</dt>
        <dd>Not ECN-Capable (L4) Transport <xref target="RFC3168" format="default"/></dd>
        <dt>Load Regulator:</dt>
<!-- [rfced] Does the proposed text improve readability of the definition for
"Load Regulator" without changing the intended meaning?

Original: 
   Load Regulator:  For each flow of PDUs, the transport function that
      is capable of controlling the data rate.

Perhaps: 
   Load Regulator:  The transport function that is capable of controlling 
      the data rate for each flow of PDUs.
-->
        <dd>For each flow of PDUs, the transport function that is capable of
        controlling the data rate. Typically located at the data source, but
        in-path nodes can regulate load in some congestion control
        arrangements (e.g., admission control, policing nodes, or transport
        circuit-breakers <xref target="RFC8084" format="default"/>). Note that
        "a function capable of controlling the load" deliberately
        includes a transport that does not actually control the load
        responsively, but ideally it ought to (e.g., a sending application
        without congestion control that uses UDP).</dd>
        <dt>ECN-PDU:</dt>
        <dd>A PDU at the IP layer or below with a
          capacity to signal congestion that is part of a congestion control
          feedback loop within which all the nodes necessary to propagate the
          signal back to the Load Regulator are capable of doing that
          propagation. An IP packet with a non-zero ECN field implies that the
          endpoints are ECN-capable, so this would be an ECN-PDU. However,
          ECN-PDU is intended to be a general term for a PDU at lower layers,
          as well as at the IP layer.</dd>
        <dt>Not-ECN-PDU:</dt>
        <dd>A PDU at the IP layer or below that is
          part of a congestion control feedback loop that is not capable of
          propagating ECN signals back to the Load
          Regulator because at least one of the nodes necessary to propagate
          the signals is incapable of doing that propagation. Note that this
          definition is a property of the feedback loop, not necessarily of the
          PDU itself; the PDU will self-describe the
          property in some protocols, but in others, the property might be carried in a separate
          control plane context that is somehow bound to the PDU.</dd>
      </dl>
    </section>
    <section anchor="ecnencap_Modes" numbered="true" toc="default">
      <name>Modes of Operation</name>
      <t>This section sets down the different modes by which congestion
      information is passed between the lower layer and the higher one. It
      acts as a reference framework for the following sections that give
      normative guidelines for designers of ECN protocols, taking each mode in
      turn:</t>
      <dl newline="false" spacing="normal">
        <dt>Feed-Forward-and-Up:</dt>
        <dd>
          <t>Nodes feed forward congestion
          notification towards the egress within the lower layer, then up and
          along the layers towards the end-to-end destination at the transport
          layer. The following local optimization is possible:</t>
<!--[rfced] This original document contained a mix of British and American
spelling (e.g., optimisation and minimize, behaviour and behavior).
FYI, this has been updated to the latter per the RFC Style Guide, with
the following exception. 

Instances of 'tunnelling' will be changed to 'tunneling' except
where they appear in the titles of documents. We have not yet made this
update as it will make the diff file more noisy for review.
-->
<dl newline="false" spacing="normal">
            <dt>Feed-Up-and-Forward:</dt>
            <dd>A lower-layer switch feeds up
              congestion notification directly into the higher layer (e.g.,
              into the ECN field in the IP header), irrespective of whether
              the node is at the egress of a subnet.</dd>
          </dl>
        </dd>
        <dt>Feed-Backward:</dt>
        <dd>Nodes feed back congestion signals
          towards the ingress of the lower layer and (optionally) attempt to
          control congestion within their own layer.</dd>
        <dt>Null:</dt>
        <dd>Nodes cannot experience congestion at the lower
          layer except at ingress nodes (which are IP-aware or equivalently
          higher-layer-aware).</dd>
      </dl>
      <section anchor="ecnencap_Forward" numbered="true" toc="default">
        <name>Feed-Forward-and-Up Mode</name>
        <t>Like IP and MPLS, many subnet technologies are based on
        self-contained PDUs or frames sent unreliably.
        They provide no feedback channel at the subnetwork layer, instead
        relying on higher layers (e.g., TCP) to feed back loss signals.</t>
        <t>In these cases, ECN may best be supported by standardising explicit
        notification of congestion into the lower-layer protocol that carries
        the data forwards. Then, a specification is needed for how the egress
        of the lower-layer subnet propagates this explicit signal into the
        forwarded upper-layer (IP) header. This signal continues forwards
        until it finally reaches the destination transport (at L4). 
        Typically, the destination will feed this congestion notification back
        to the source transport using an end-to-end protocol (e.g., TCP). This
        is the arrangement that has already been used to add ECN to IP-in-IP
        tunnels <xref target="RFC6040" format="default"/>, IP-in-MPLS, and MPLS-in-MPLS <xref target="RFC5129" format="default"/>.</t>
        <t>This mode is illustrated in <xref target="ecnencap_Fig_Feed-Forward-and-Up" format="default"/>. Along the middle of the
        figure, layers 2, 3, and 4 of the protocol stack are shown. One
        packet is shown along the bottom as it progresses across the network
        from source to destination, crossing two subnets connected by a
        router and crossing two switches on the path across each subnet.
        Congestion at the output of the first switch (shown as *) leads to a
        congestion marking in the L2 header (shown as C in the illustration of
        the packet). The chevrons show the progress of the resulting
        congestion indication. It is propagated from link to link across the
        subnet in the L2 header. Then, when the router removes the marked L2
        header, it propagates the marking up into the L3 (IP) header. The
        router forwards the marked L3 header into subnet B. The L2 protocol used
        in subnet B does not support congestion notification, but the signal proceeds across it in
        the L3 header.</t>
        <t>Note that there is no implication that each 'C' marking is encoded
        the same; a different encoding might be used for the 'C' marking in
        each protocol.</t>
        <t>Finally, for completeness, we show the L3 marking arriving at the
        destination, where the host transport protocol (e.g., TCP) feeds it
        back to the source in the L4 acknowledgement (the 'C' at L4 in the
        packet at the top of the diagram).</t>
        <figure anchor="ecnencap_Fig_Feed-Forward-and-Up">
          <name>Feed-Forward-and-Up Mode</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
                    _ _ _ 
         /_______  | | |C|  ACK Packet (V)
         \         |_|_|_|
+---+        layer: 2 3 4 header                            +---+
|  <|<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Packet V <<<<<<<<<<<<<|<< |L4
|   |                         +---+                         | ^ |
|   | . . . . . . Packet U. . | >>|>>> Packet U >>>>>>>>>>>>|>^ |L3
|   |     +---+     +---+     | ^ |     +---+     +---+     |   |
|   |     |  *|>>>>>|>>>|>>>>>|>^ |     |   |     |   |     |   |L2
|___|_____|___|_____|___|_____|___|_____|___|_____|___|_____|___|
source          subnet A      router       subnet B         dest
   __ _ _ _|   __ _ _ _|  __ _ _|       __ _ _ _|
  |  | | | |  |  | | |C| |  | |C|      |  | |C| |    Data________\
  |__|_|_|_|  |__|_|_|_| |__|_|_|      |__|_|_|_|    Packet (U)  /
layer:4 3 2A      4 3 2A     4 3           4 3 2B
header
]]></artwork>
        </figure>
        <t>Of course, modern networks are rarely as simple as this textbook
        example, often involving multiple nested layers. For example, a Third
        Generation Partnership Project (3GPP) mobile network may have two
        IP-in-IP (GTP) <xref target="GTPv1" format="default"/> tunnels in
        series and an MPLS backhaul between the base station and the first
        router. Nonetheless, the example illustrates the general idea of
        feeding congestion notification forward then upward whenever a header
        is removed at the egress of a subnet.</t>
        <t>Note that the Forward Explicit Congestion Notification (FECN) bit in Frame Relay <xref target="Buck00" format="default"/> and the Explicit Forward Congestion Indication (EFCI)
        <xref target="ITU-T.I.371" format="default"/> bit in ATM user data cells follow a
        feed-forward pattern. 
<!-- [rfced] May we change "to interface to" to "to interface with" here?

Original:
   However, in ATM,
   this arrangement is only part of a feed-forward-and-backward pattern
   at the lower layer, not feed-forward-and-up out of the lower layer -
   the intention was never to interface to IP ECN at the subnet egress. 

Perhaps:
   However, in ATM,
   this arrangement is only part of a feed-forward-and-backward pattern
   at the lower layer, not feed-forward-and-up out of the lower layer -
   the intention was never to interface with IP ECN at the subnet egress.
-->
However, in ATM, this arrangement is only part
        of a feed-forward-and-backward pattern at the lower layer, not
        feed-forward-and-up out of the lower layer -- the intention was
        never to interface to IP ECN at the subnet egress. 
<!-- [rfced] The first sentence of paragraph 6 in Section 3.1 refers to "FECN"
as a bit in Frame Relay. Should the following sentence be updated to
reflect this?

Original (Section 3.1):
   Note that the FECN (forward ECN ) bit in Frame Relay [Buck00] and the
   explicit forward congestion indication (EFCI [ITU-T.I.371]) bit in
   ATM user data cells follow a feed-forward pattern.

Original:
   To our knowledge, Frame Relay FECN is solely used to detect where
   more capacity should be provisioned.

Perhaps:
   To our knowledge, the FECN bit in Frame Relay is solely used to detect 
   where more capacity should be provisioned.
-->
To our knowledge,
        Frame Relay FECN is solely used to detect where more capacity should
        be provisioned.</t>
      </section>
      <section anchor="ecnencap_Up" numbered="true" toc="default">
        <name>Feed-Up-and-Forward Mode</name>
        <t>Ethernet is particularly difficult to extend incrementally to
        support ECN. One way to support ECN in such cases is to use so-called
        'Layer 3 switches'. These are Ethernet switches that dig into the
        Ethernet payload to find an IP header and manipulate or act on certain
        IP fields (specifically Diffserv and ECN). For instance, in Data
        Center TCP <xref target="RFC8257" format="default"/>, Layer 3 switches
        are configured to mark the ECN field of the IP header within the
        Ethernet payload when their output buffer becomes congested. With
        respect to switching, a Layer 3 switch acts solely on the addresses in
        the Ethernet header; it does not use IP addresses and it does not
        decrement the TTL field in the IP header.</t>
        <figure anchor="ecnencap_Fig_Feed-Up">
          <name>Feed-Up-and-Forward Mode</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
                    _ _ _ 
         /_______  | | |C|  ACK packet (V)
         \         |_|_|_|
+---+        layer: 2 3 4 header                            +---+
|  <|<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Packet V <<<<<<<<<<<<<|<< |L4
|   |                         +---+                         | ^ |
|   | . . .  >>>> Packet U >>>|>>>|>>> Packet U >>>>>>>>>>>>|>^ |L3
|   |     +--^+     +---+     |  v|     +---+     +---+     | ^ |
|   |     |  *|     |   |     |  >|>>>>>|>>>|>>>>>|>>>|>>>>>|>^ |L2
|___|_____|___|_____|___|_____|___|_____|___|_____|___|_____|___|
source          subnet E      router       subnet F         dest
   __ _ _ _|   __ _ _ _|  __ _ _|       __ _ _ _|
  |  | | | |  |  | |C| | |  | |C|      |  | |C|C|    Data________\
  |__|_|_|_|  |__|_|_|_| |__|_|_|      |__|_|_|_|    Packet (U)  /
layer:4 3 2       4 3 2      4 3           4 3 2
header
]]></artwork>
        </figure>
        <t>By comparing <xref target="ecnencap_Fig_Feed-Up" format="default"/>
        with <xref target="ecnencap_Fig_Feed-Forward-and-Up"
        format="default"/>, it can be seen that subnet E (perhaps a subnet of
        Layer 3 Ethernet switches) works in feed-up-and-forward mode by
        notifying congestion directly into L3 at the point of congestion, even
        though the congested switch does not otherwise act at L3. 
<!-- [rfced] For clarity, may we split this sentence into two?
Also, perhaps changing from 'natively' to 'innately'; see the final 
question regarding inclusive language.

Original: 
   In this example, the technology in subnet F (e.g.  MPLS) does
   support ECN natively, so when the router adds the layer-2 header it
   copies the ECN marking from L3 to L2 as well, as shown by the 'C's in
   both layers.

Perhaps: 
   In this example, the technology in subnet F (e.g., MPLS) innately
   supports ECN.  When the router adds the Layer 2 header, it
   copies the ECN marking from L3 to L2 as well, as shown by the 'C's in
   both layers.
-->
In this example, the technology in subnet F (e.g., MPLS) does support ECN
natively, so when the router adds the Layer 2 header it copies the ECN marking
from L3 to L2 as well, as shown by the 'C's in both layers.</t>
      </section>
      <section anchor="ecnencap_Backward" numbered="true" toc="default">
        <name>Feed-Backward Mode</name>
        <t>In some Layer 2 technologies, congestion notification has
        been defined for use internally within the subnet with its own
        feedback and load regulation; typically, the interface with IP for
        ECN has not been defined.</t>
<!-- [rfced] To improve readability, may we rephrase this 
sentence as follows and update "tending" to past tense (to match "was")?

Original:
For instance, for the available bit-rate (ABR) service in ATM, the
relative rate mechanism was one of the more popular mechanisms for
managing traffic, tending to supersede earlier designs.

Perhaps: 
For instance, the relative rate mechanism was one of the more popular
ways to manage traffic for the Available Bit Rate (ABR) service in ATM,
and it tended to supersede earlier designs.
-->
<t>For instance, for the Available Bit Rate (ABR) service in ATM, the
        relative rate mechanism was one of the more popular mechanisms for
        managing traffic, tending to supersede earlier designs. In this
        approach, ATM switches send special resource management (RM) cells in
        both the forward and backward directions to control the ingress rate
        of user data into a virtual circuit. If a switch buffer is approaching
        congestion or is congested, it sends an RM cell back towards the
        ingress with the No Increase (NI) or Congestion
        Indication (CI) bit set in its message type field <xref target="ATM-TM-ABR" format="default"/>, respectively. The ingress then holds or decreases its sending
        bit-rate accordingly.</t>
        <figure anchor="ecnencap_Fig_Feed-Backward">
          <name>Feed-Backward Mode</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
                     _ _ _ 
          /_______  | | |C|  ACK packet (X)
          \         |_|_|_|
 +---+        layer: 2 3 4 header                            +---+
 |  <|<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Packet X <<<<<<<<<<<<<|<< |L4
 |   |                         +---+                         | ^ |
 |   |                         |  *|>>> Packet W >>>>>>>>>>>>|>^ |L3
 |   |     +---+     +---+     |   |     +---+     +---+     |   |
 |   |     |   |     |   |     |  <|<<<<<|<<<|<(V)<|<<<|     |   |L2
 |   | . . | . |Packet U | . . | . | . . | . | . . | .*| . . |   |L2
 |___|_____|___|_____|___|_____|___|_____|___|_____|___|_____|___|
 source          subnet G      router       subnet H         dest
     __ _ _ _    __ _ _ _    __ _ _        __ _ _ _   later
    |  | | | |  |  | | | |  |  | | |      |  | |C| |  data________\
    |__|_|_|_|  |__|_|_|_|  |__|_|_|      |__|_|_|_|  packet (W)  /
        4 3 2       4 3 2       4 3           4 3 2
                                        _        
                                  /__  |C|  Feedback control
                                  \    |_|  cell/frame (V)
                                        2    
     __ _ _ _    __ _ _ _    __ _ _        __ _ _ _   earlier
    |  | | | |  |  | | | |  |  | | |      |  | | | |  data________\
    |__|_|_|_|  |__|_|_|_|  |__|_|_|      |__|_|_|_|  packet (U)  /
layer:  4 3 2       4 3 2       4 3           4 3 2
header
]]></artwork>
        </figure>
        <t>ATM's feed-backward approach does not fit well when layered beneath
        IP's feed-forward approach unless the initial data source is
        the same node as the ATM ingress.
          <xref target="ecnencap_Fig_Feed-Backward" format="default"/> shows the feed-backward approach
        being used in subnet H. 
If the final switch on the path is congested
        (*), it does not feed forward any congestion indications on the packet
        (U). Instead, it sends a control cell (V) back to the router at the ATM
        ingress.</t>
        <t>However, the backward feedback does not reach the original data
        source directly because IP does not support backward feedback (and
        subnet G is independent of subnet H). Instead, the router in the
        middle throttles down its sending rate, but the original data sources
        don't reduce their rates. 

The resulting rate mismatch causes the
        middle router's buffer at layer 3 to back up until it becomes
        congested, which it signals forwards on later data packets at layer 3
        (e.g., packet W). Note that the forward signal from the middle router
        is not triggered directly by the backward signal. Rather, it is
        triggered by congestion resulting from the middle router's mismatched
        rate response to the backward signal.</t>
        <t>In response to this later forward signalling, end-to-end feedback
        at layer 4 finally completes the tortuous path of congestion
        indications back to the origin data source as before.</t>
        <t>Quantized Congestion Notification (QCN) <xref target="IEEE802.1Q" format="default"/>
        would suffer from similar problems if extended to multiple subnets.
        However, QCN was clearly characterized as solely
        applicable to a single subnet from the start (see <xref target="ecnencap_Guidelines_Backward" format="default"/>).</t>
      </section>
      <section anchor="ecnencap_Null" numbered="true" toc="default">
        <name>Null Mode</name>
        <t>Link and physical-layer resources are often 'non-blocking' by
        design. Congestion notification may be implemented in these cases, but
        it does not need to be deployed at the lower layer; ECN in IP would be
        sufficient.</t>
        <t>A degenerate example is a point-to-point Ethernet link. Excess
        loading of the link merely causes the queue from the higher layer to
        back up, while the lower layer remains immune to congestion. Even a
        whole meshed subnetwork can be made immune to interior congestion by
        limiting ingress capacity and sufficient sizing of interior links,
        e.g., a non-blocking fat-tree network <xref target="Leiserson85" format="default"/>. An
        alternative to fat links near the root is numerous thin links with
        multi-path routing to ensure even worst-case patterns of load cannot
        congest any link, e.g., a Clos network <xref target="Clos53" format="default"/>.</t>
      </section>
    </section>
<!-- [rfced] Should these section titles be updated as follows
to use "ECN"?

Original (Section 4): 
  Feed-Forward-and-Up Mode: Guidelines for Adding Congestion Notification

Perhaps: 
  Feed-Forward-and-Up Mode: Guidelines for Adding ECN

Original (Section 5): 
  Feed-Up-and-Forward Mode: Guidelines for Adding Congestion Notification

Perhaps: 
  Feed-Up-and-Forward Mode: Guidelines for Adding ECN

Original (Section 6): 
  Feed-Backward Mode: Guidelines for Adding Congestion Notification

Perhaps: 
  Feed-Backward Mode: Guidelines for Adding ECN
-->
    <section anchor="ecnencap_Guidelines_Forward" numbered="true" toc="default">
      <name>Feed-Forward-and-Up Mode: Guidelines for Adding Congestion Notification</name>
      <t>Feed-forward-and-up is the mode already used for signalling ECN up
      the layers through MPLS into IP <xref target="RFC5129" format="default"/> and through
      IP-in-IP tunnels <xref target="RFC6040" format="default"/>, whether encapsulating with
      IPv4 <xref target="RFC2003" format="default"/>, IPv6 <xref target="RFC2473" format="default"/>, or IPsec
      <xref target="RFC4301" format="default"/>. These RFCs take a consistent approach and the
      following guidelines are designed to ensure this consistency continues
      as ECN support is added to other protocols that encapsulate IP. The
      guidelines are also designed to ensure compliance with the more general
      best current practice for the design of alternate ECN schemes given in
      <xref target="RFC4774" format="default"/> and extended by <xref target="RFC8311" format="default"/>.</t>
      <t>The rest of this section is structured as follows:</t>
      <ul spacing="normal">
        <li>
          <xref target="ecnencap_IP-IP_Coupled_Shim_Tunnels" format="default"/> addresses
          the most straightforward cases, where <xref target="RFC6040" format="default"/> can
          be applied directly to add ECN to tunnels that are effectively
          IP-in-IP tunnels, but with a shim header(s) between the IP
          headers.</li>
        <li>
          <t>The subsequent sections give guidelines for adding congestion notification to a
          subnet technology that uses feed-forward-and-up mode like IP, but it
          is not so similar to IP that <xref target="RFC6040" format="default"/> rules can be
          applied directly. Specifically:</t>
          <ul spacing="normal">
            <li>Sections <xref format="counter"
            target="ecnencap_WireProtocolECNSupport"/>, <xref format="counter"
            target="ecnencap_EncapGuidelines"/>, and <xref format="counter"
            target="ecnencap_DecapGuidelines"/> address how to add ECN support
            to the wire protocol and to the encapsulators and decapsulators at
            the ingress and egress of the subnet, respectively.</li>
            <li>
              <xref target="ecnencap_Sequences" format="default"/> deals with the special
              but common case of sequences of tunnels or subnets that all use
              the same technology.</li>
            <li>
              <xref target="ecnencap_Reframing" format="default"/> deals with the question
              of reframing when IP packets do not map 1:1 into lower-layer
              frames.</li>
          </ul>
        </li>
      </ul>
      <section anchor="ecnencap_IP-IP_Coupled_Shim_Tunnels" numbered="true" toc="default">
        <name>IP-in-IP Tunnels with Shim Headers</name>
        <t>A common pattern for many tunnelling protocols is to encapsulate an
        inner IP header with a shim header(s) then an outer IP header. A shim
        header is defined as one that is not sufficient alone to forward the
        packet as an outer header. Another common pattern is for a shim to
        encapsulate an L2 header, which in turn encapsulates (or
        might encapsulate) an IP header. <xref target="RFC9601" format="default"/> clarifies that <xref target="RFC6040"/>
        is just as applicable when there is a shim(s) and possibly an L2 header
        between two IP headers.</t>
        <t>However, it is not always feasible or necessary to propagate ECN
        between IP headers when separated by a shim. For instance, it might be
        too costly to dig to arbitrary depths to find an inner IP header,
        there may be little or no congestion within the tunnel by design (see
        null mode in <xref target="ecnencap_Null" format="default"/> above), or a legacy
        implementation might not support ECN. In cases where a tunnel does not
        support ECN, it is important that the ingress does not copy the ECN
        field from an inner IP header to an outer. Therefore <xref section="4" target="RFC9601" format="default"/> requires network
        operators to configure the ingress of a tunnel that does not support
        ECN so that it zeros the ECN field in the outer IP header.</t>
        <t>Nonetheless, in many cases it is feasible to propagate the ECN
        field between IP headers separated by a shim header(s) and/or an L2
        header. Particularly in the typical case when the outer IP header and
        the shim(s) is added (or removed) as part of the same procedure. Even
        if the shim(s) encapsulates an L2 header, it is often possible to find
        an inner IP header within the L2 PDU and propagate ECN between that
        and the outer IP header. This can be thought of as a special case of
        the feed-up-and-forward mode (<xref target="ecnencap_Up" format="default"/>), so the
        guidelines for this mode apply (<xref target="ecnencap_Guidelines_Up" format="default"/>).</t>
        <t>Numerous shim protocols have been defined for IP tunnelling. More
        recent ones, e.g., Geneve <xref target="RFC8926" format="default"/> and Generic UDP
        Encapsulation (GUE) <xref target="I-D.ietf-intarea-gue" format="default"/> cite and
        follow <xref target="RFC6040"/>. Some earlier ones, e.g., CAPWAP <xref target="RFC5415" format="default"/> and LISP <xref target="RFC9300" format="default"/>, cite <xref target="RFC3168"/>,
        which is compatible with <xref target="RFC6040"/>.</t>
        <t>However, as <xref section="9.3" target="RFC3168" format="default"/> pointed out, ECN
        support needs to be defined for many earlier shim-based tunnelling
        protocols, e.g., L2TPv2 <xref target="RFC2661" format="default"/>, L2TPv3 <xref target="RFC3931" format="default"/>, GRE <xref target="RFC2784" format="default"/>, PPTP <xref target="RFC2637" format="default"/>, GTP <xref target="GTPv1" format="default"/> <xref target="GTPv1-U" format="default"/>, <xref target="GTPv2-C" format="default"/>, and Teredo <xref target="RFC4380" format="default"/>, as well as some recent ones, e.g., VXLAN <xref target="RFC7348" format="default"/>, NVGRE <xref target="RFC7637" format="default"/>, and NSH <xref target="RFC8300" format="default"/>.</t>
        <t>All these IP-based encapsulations can be updated in one shot by
        simple reference to <xref target="RFC6040"/>. However, it would not be appropriate to
        update all these protocols from within the present guidance document.
        Instead, a companion specification <xref target="RFC9601" format="default"/> 
        has the appropriate Standards Track status to update Standards Track
        protocols. For those that are not under IETF change control <xref target="RFC9601" format="default"/> can only recommend that
        the relevant body updates them.</t>
      </section>
      <section anchor="ecnencap_WireProtocolECNSupport" numbered="true" toc="default">
        <name>Wire Protocol Design: Indication of ECN Support</name>
        <t>This section is intended to guide the redesign of any lower-layer
        protocol that encapsulates IP to add native congestion notification support at the lower
        layer. It reflects the approaches used in <xref target="RFC6040" format="default"/> and
        in <xref target="RFC5129" format="default"/>. Therefore, IP-in-IP tunnels or IP-in-MPLS
        or MPLS-in-MPLS encapsulations that already comply with <xref target="RFC6040" format="default"/> or <xref target="RFC5129" format="default"/> will already satisfy
        this guidance.</t>
        <t>A lower-layer (or subnet) congestion notification system:</t>
        <ol spacing="normal" type="1"><li><bcp14>SHOULD NOT</bcp14> apply explicit congestion notifications to PDUs that
            are destined for legacy layer-4 transport implementations that
            will not understand ECN; and</li>
          <li anchor="ecnencap_Egress_Check">
            <t><bcp14>SHOULD NOT</bcp14> apply explicit congestion notifications to PDUs if the egress of the subnet might
            not propagate congestion notification onward into the higher
            layer.</t>
            <t>We use the term ECN-PDUs for a PDU
            on a feedback loop that will propagate congestion notification
            properly because it meets both the above criteria. Additionally, a
            Not-ECN-PDU is a PDU on a feedback loop that does not meet at
            least one of the criteria, and therefore will not propagate
            congestion notification properly. A corollary of the above is that
            a lower-layer congestion notification protocol:</t>
          </li>
          <li><bcp14>SHOULD</bcp14> be able to distinguish ECN-PDUs from Not-ECN-PDUs.</li>
        </ol>
        <t>Note that there is no need for all interior nodes within a subnet
        to be able to mark congestion explicitly. A mix of drop and explicit congestion
        signals from different nodes is fine. However, if <em>any</em>
        interior nodes might generate congestion markings, Guideline <xref format="counter" target="ecnencap_Egress_Check"/> above says that all
        relevant egress nodes <bcp14>SHOULD</bcp14> be able to propagate those markings up
        to the higher layer.</t>
        <t>In IP, if the ECN field in each PDU is cleared to the Not ECN-Capable Transport (Not-ECT) codepoint, it indicates that the L4 transport
        will not understand congestion markings. A congested buffer must not
        mark these Not-ECT PDUs; therefore, it has to signal congestion by
        increasingly applying drop instead.</t>
        <t>The mechanism a lower layer uses to distinguish the ECN capability
        of PDUs need not mimic that of IP. The above guidelines merely say
        that the lower-layer system as a whole should achieve the same
        outcome. For instance, ECN-capable feedback loops might use PDUs that
        are identified by a particular set of labels or tags. Alternatively,
        logical-link protocols that use flow state might determine whether a
        PDU can be congestion marked by checking for ECN-support in the flow
        state. Other protocols might depend on out-of-band control
        signals.</t>
        <t>The per-domain checking of ECN support in MPLS <xref target="RFC5129" format="default"/> is a good example of a way to avoid sending
        congestion markings to L4 transports that will not understand them
        without using any header space in the subnet protocol.</t>
        <t>In MPLS, header space is extremely limited; therefore, <xref target="RFC5129"/> does
        not provide a field in the MPLS header to indicate whether the PDU is
        an ECN-PDU or a Not-ECN-PDU. Instead, interior nodes in a domain are
        allowed to set explicit congestion indications without checking
        whether the PDU is destined for a L4 transport that will understand
        them. Nonetheless, this is made safe by requiring that the network
        operator upgrades all decapsulating edges of a whole domain at once
        as soon as even one switch within the domain is configured to mark
        rather than drop some PDUs during congestion. Therefore, any edge node that
        might decapsulate a packet will be capable of checking whether the
        higher-layer transport is ECN-capable. 
<!-- May we rephrase the following sentence for a better flow of the text?

Original: 
When decapsulating a CE-marked packet, if the decapsulator discovers
that the higher layer (inner header) indicates the transport is not ECN-
capable, it drops the packet — effectively on behalf of the earlier congested
node (see Decapsulation Guideline 1 in Section 4.4).

Perhaps: 
If the decapsulator discovers that the higher layer (inner header)
indicates the transport is not ECN-capable when decapsulating a CE-marked
packet, it effectively drops the packet on behalf of the earlier congested
node (see Decapsulation Guideline 1 in Section 4.4).
-->
When decapsulating a CE-marked
        packet, if the decapsulator discovers that the higher layer (inner
        header) indicates the transport is not ECN-capable, it drops the
        packet -- effectively on behalf of the earlier congested node
        (see Decapsulation Guideline <xref format="counter" target="ecnencap_dropNot-ECTinnerCEouter"/> in <xref target="ecnencap_DecapGuidelines" format="default"/>).</t>
        <t>It was only appropriate to define such an incremental deployment
        strategy because MPLS is targeted solely at professional operators
        who can be expected to ensure that a whole subnetwork is consistently
        configured. This strategy might not be appropriate for other link
        technologies targeted at zero-configuration deployment or deployment
        by the general public (e.g., Ethernet). For such 'plug-and-play'
        environments, it will be necessary to invent a fail-safe approach that
        ensures congestion markings will never fall into black holes, no
        matter how inconsistently a system is put together. 

Alternatively,
        congestion notification relying on correct system configuration could
        be confined to flavours of Ethernet intended only for professional
        network operators, such as Provider Backbone Bridges (PBB) (<xref target="IEEE802.1Q" format="default"/>; previously 802.1ah).</t>
        <t>ECN support in TRansparent Interconnection of Lots of Links (TRILL) <xref target="RFC9600" format="default"/>
        provides a good example of how to add congestion notification to a lower-layer protocol
        without relying on careful and consistent operator configuration.
        TRILL provides an extension header word with space for flags of
        different categories depending on whether logic to understand the
        extension is critical. The congestion-experienced marking has been
        defined as a 'critical ingress-to-egress' flag. 
<!-- [rfced] May we rephrase the following sentence for clarity? 
Specifically, "it" in the phrase "... does not have any logic to 
process it, it will drop it..." seems unclear and repetitive.

Original: 
So if a transit RBridge sets this flag on a frame and an egress
RBridge does not have any logic to process it, it will drop it; which is the
desired default action anyway.

Perhaps: 
If a transit RBridge sets this flag on a frame and an egress RBridge
does not have any logic to process it, then the egress RBridge will drop the
frame, which is the desired default action anyway.
-->
So if a transit
        RBridge sets this flag on a frame and an egress RBridge does not have any logic
        to process it, it will drop it; which is the desired default action
        anyway. Therefore, TRILL RBridges can be updated with support for congestion notification
        in no particular order and, at the egress of the TRILL campus,
        congestion notification will be propagated to IP as ECN whenever ECN
        logic has been implemented at the egress, or as drop otherwise.</t>
        <t>QCN <xref target="IEEE802.1Q" format="default"/> is not intended to extend beyond a
        single subnet or interoperate with ECN. Nonetheless, the way QCN
        indicates to lower-layer devices that the endpoints will not
        understand QCN provides another example that a lower-layer protocol
        designer might be able to mimic for their scenario. 
<!-- [rfced] Please clarify this sentence. Is it indicating that both non-QCN 
frames AND an ingress bridge are required to map arriving not-QCN-capable
IP packets? Also, does each packet get mapped to a PCP?

Original: 
   An operator can define certain
   Priority Code Points (PCPs [IEEE802.1Q]; previously 802.1p) to
   indicate non-QCN frames and an ingress bridge is required to map
   arriving not-QCN-capable IP packets to one of these non-QCN PCPs.

Perhaps:
   An operator can define certain 
   Priority Code Points (PCPs) [IEEE802.1Q] to indicate that non-QCN 
   frames and an ingress bridge are required to map arriving not-QCN-
   capable IP packets to one of these non-QCN PCPs.

Or (two independent clauses; added "each"):
   An operator can define certain
   Priority Code Points (PCPs [IEEE802.1Q]; previously 802.1p) to
   indicate non-QCN frames, and an ingress bridge is required to map
   each arriving not-QCN-capable IP packet to one of these non-QCN PCPs.
-->
An operator can
        define certain Priority Code Points (PCPs) (<xref target="IEEE802.1Q" format="default"/>;
        previously 802.1p) to indicate non-QCN frames and an ingress bridge is
        required to map arriving not-QCN-capable IP packets to one of these
        non-QCN PCPs.</t>

        <t>When drop for non-ECN traffic is deferred to the egress of a subnet,
        it cannot necessarily be assumed that one congestion mark is equivalent to one
        drop, as was originally required by <xref target="RFC3168" format="default"/>.
        <xref target="RFC8311" format="default"/> updated <xref target="RFC3168"/> to allow
        experimentation with congestion markings that are not equivalent to drop,
        particularly for L4S <xref target="RFC9331" format="default"/>. ECN
        support in TRILL <xref target="RFC9600" format="default"/>
        is a good example of a way to defer drop to the egress of a subnet both
        when marks are equivalent to drops (as in <xref target="RFC3168"/>) and when they
        are not (as in L4S). The ECN scheme for MPLS <xref target="RFC5129" format="default"/>
        was defined before L4S, so it only currently supports deferred drop that
        is equivalent to ECN marking. Nonetheless, in principle, MPLS
        (and potentially future L2 protocols) could support L4S marking and copy TRILL's approach for determining the
        drop level of any non-ECN traffic at the subnet egress.</t>
      </section>
      <section anchor="ecnencap_EncapGuidelines" numbered="true" toc="default">
        <name>Encapsulation Guidelines</name>
        <t>This section is intended to guide the redesign of any node that
        encapsulates IP with a lower-layer header when adding native congestion notification
        support to the lower-layer protocol. It reflects the approaches used
        in <xref target="RFC6040" format="default"/> and <xref target="RFC5129" format="default"/>. Therefore,
        IP-in-IP tunnels or IP-in-MPLS or MPLS-in-MPLS encapsulations that
        already comply with <xref target="RFC6040" format="default"/> or <xref target="RFC5129" format="default"/> will already satisfy this guidance.</t>
<ol spacing="normal" type="1"><li>
            <t>Egress Capability Check: A subnet ingress needs to be sure that
            the corresponding egress of a subnet will propagate any congestion
            notification added to the outer header across the subnet. This is
            necessary in addition to checking that an incoming PDU indicates
            an ECN-capable (L4) transport. Examples of how this guarantee
            might be provided include:</t>
            <ul spacing="normal">
              <li>by configuration (e.g., if any label switches in a domain
                supports congestion marking, <xref target="RFC5129" format="default"/> requires all
                egress nodes to have been configured to propagate ECN).</li>
              <li>by the ingress explicitly checking that the egress
                propagates ECN (e.g., an early attempt to add ECN support to
                TRILL used IS-IS to check path capabilities before adding ECN
                extension flags to each frame <xref target="RFC7780" format="default"/>).</li>
              <li>by inherent design of the protocol (e.g., by encoding congestion
                marking on the outer header in such a way that a legacy egress
                that does not understand ECN will consider the PDU corrupt or
                invalid and discard it; thus, at least propagating a form of
                congestion signal).</li>
            </ul>
	  </li>
          <li>Egress Fails Capability Check: If the ingress cannot guarantee
            that the egress will propagate congestion notification, the
            ingress <bcp14>SHOULD</bcp14> disable congestion notification at the lower layer when it forwards the
            PDU. An example of how the ingress might disable congestion notification at the lower
            layer would be by setting the outer header of the PDU to identify
            it as a Not-ECN-PDU, assuming the subnet technology supports such
            a concept.</li>
	    <li anchor="ecnencap_Encap_Copy">
            <t>Standard Congestion Monitoring
            Baseline: Once the ingress to a subnet has established that the
            egress will correctly propagate ECN, it <bcp14>SHOULD</bcp14>
            encode the same level of congestion in outer headers as is
            arriving in incoming headers on encapsulation. For example, it might copy any
            incoming congestion notifications into the outer header of the
            lower-layer protocol.</t>
            <t>This ensures that
            bulk congestion monitoring of outer headers (e.g., by a network
            management node monitoring congestion markings in passing frames) will measure
            congestion accumulated along the whole upstream path, starting from the
            Load Regulator and not just starting from the ingress of the subnet. 
A node
            that is not the Load Regulator <bcp14>SHOULD NOT</bcp14> re-initialize the level
            of CE markings in the outer header to zero. </t>
            <t>It
            would still also be possible to measure congestion introduced
            across one subnet (or tunnel) by subtracting the level of CE
            markings on inner headers from that on outer headers (see <xref target="RFC6040" sectionFormat="of" section="C"/>). For example:</t>
            <ul spacing="normal">
              <li>If this guideline has been followed and if the level of CE
                markings is 0.4% on the outer header and 0.1% on the inner header, 0.4%
                congestion has been introduced across all the networks since
                the Load Regulator, and 0.3% (= 0.4% - 0.1%) has been
                introduced since the ingress to the current subnet (or
                tunnel).</li>
              <li>Without this guideline, if the subnet ingress had
                re-initialized the outer congestion level to zero, the outer
                and inner headers would measure 0.1% and 0.3%. It would still be
                possible to infer that the congestion introduced since the
                Load Regulator was 0.4% (= 0.1% + 0.3%), but only if the
                monitoring system somehow knows whether the subnet ingress
                re-initialized the congestion level.</li>
            </ul>
            <t>As long as subnet and tunnel technologies use the
            standard congestion monitoring baseline in this guideline,
            monitoring systems will know to use the former approach rather
            than having to "somehow know" which approach to use.
            </t>
          </li>
        </ol>
      </section>
      <section anchor="ecnencap_DecapGuidelines" numbered="true" toc="default">
        <name>Decapsulation Guidelines</name>
        <t>This section is intended to guide the redesign of any node that
        decapsulates IP from within a lower-layer header when adding native
        congestion notification support to the lower-layer protocol. It reflects the approaches
        used in <xref target="RFC6040" format="default"/> and in <xref target="RFC5129" format="default"/>.
        Therefore, IP-in-IP tunnels or IP-in-MPLS or MPLS-in-MPLS
        encapsulations that already comply with <xref target="RFC6040" format="default"/> or
        <xref target="RFC5129" format="default"/> will already satisfy this guidance.</t>
        <t>A subnet egress <bcp14>SHOULD NOT</bcp14> simply copy congestion notifications from
        outer headers to the forwarded header. It <bcp14>SHOULD</bcp14> calculate the
        outgoing congestion notification field from the inner and outer
        headers using the following guidelines. If there is any conflict,
        rules earlier in the list take precedence over rules later in the
        list.</t>
        <ol spacing="normal" type="1"><li anchor="ecnencap_dropNot-ECTinnerCEouter">
            <t>If the arriving inner
            header is a Not-ECN-PDU, it implies the L4 transport will not
            understand explicit congestion markings. Then:</t>
            <ul spacing="normal">
              <li>If the outer header carries an explicit congestion marking,
                it is likely that a protocol error has occurred, so drop is the only indication of congestion that the L4
                transport will understand. 
If the congestion marking is the
                most severe possible, the packet <bcp14>MUST</bcp14> be dropped. 

However, if congestion can be marked with multiple levels of severity and the
packet's marking is not the most severe, this requirement can be relaxed to:
the packet <bcp14>SHOULD</bcp14> be dropped.</li>
              <li>If the outer is an ECN-PDU that carries no indication of
                congestion or a Not-ECN-PDU the PDU <bcp14>SHOULD</bcp14> be forwarded, but
                still as a Not-ECN-PDU.</li>
            </ul>
          </li>
          <li>If the outer header does not support ENC (a Not-ECN-PDU), but the inner header does (an
            ECN-PDU), the inner header <bcp14>SHOULD</bcp14> be forwarded unchanged.</li>
          <li>In some lower-layer protocols, congestion may be signalled as a
            numerical level, such as in the control frames of QCN <xref target="IEEE802.1Q" format="default"/>. If such
            a multi-bit encoding encapsulates an ECN-capable IP data packet, a
            function will be needed to convert the quantized congestion level
            into the frequency of congestion markings in outgoing IP
            packets.</li>
          <li>
            <t>Congestion indications might be encoded by a severity level.
            For instance, increasing levels of congestion might be encoded by
            numerically increasing indications, e.g., PCN can be encoded in each PDU at three severity
            levels in IP or MPLS <xref target="RFC6660" format="default"/> and the default
            encapsulation and decapsulation rules <xref target="RFC6040" format="default"/> are
            compatible with this interpretation of the ECN field. </t>
            <t>If the arriving inner header is an ECN-PDU, where
            the inner and outer headers carry indications of congestion of
            different severity, the more severe indication <bcp14>SHOULD</bcp14> be forwarded
            in preference to the less severe.</t>
          </li>
          <li>
            <t>The inner and outer headers might carry a combination of
            congestion notification fields that should not be possible given
            any currently used protocol transitions. For instance, if
            Encapsulation Guideline <xref format="counter" target="ecnencap_Encap_Copy"/> in <xref target="ecnencap_EncapGuidelines" format="default"/> had been followed, it should
            not be possible to have a less severe indication of congestion in
            the outer header than in the inner header. It <bcp14>MAY</bcp14> be appropriate to log
            unexpected combinations of headers and possibly raise an alarm.
            </t>
            <t>If a safe outgoing codepoint can be
            defined for such a PDU, the PDU <bcp14>SHOULD</bcp14> be forwarded rather than
            dropped. Some implementers discard PDUs with currently unused
            combinations of headers just in case they represent an attack.
            However, an approach using alarms and policy-mediated drop is
            preferable to hard-coded drop so that operators can keep track of
            possible attacks, but currently unused combinations are not
            precluded from future use through new standards actions.</t>
          </li>
        </ol>
      </section>
      <section anchor="ecnencap_Sequences" numbered="true" toc="default">
        <name>Sequences of Similar Tunnels or Subnets</name>
        <t>In some deployments, particularly in 3GPP networks, an IP packet
        may traverse (in sequence) two or more IP-in-IP tunnels that all use
        identical technology (e.g., GTP).</t>
        <t>In such cases, it would be sufficient for every encapsulation and
        decapsulation in the chain to comply with <xref
        target="RFC6040"/>. 
<!-- [rfced] Should "outer" and "inner" be specified as "outer header" and
"inner header" in this sentence for clarity?

Original: 
   Alternatively,
   as an optimisation, a node that decapsulates a packet and immediately
   re-encapsulates it for the next tunnel MAY copy the incoming outer
   ECN field directly to the outgoing outer and the incoming inner ECN
   field directly to the outgoing inner.

Perhaps: 
   Alternatively,
   as an optimization, a node that decapsulates a packet and immediately    
   re-encapsulates it for the next tunnel MAY copy the incoming
   outer ECN field directly to the outgoing outer header and the incoming 
   inner ECN field directly to the outgoing inner header.
-->
Alternatively, as an optimization, a node that
        decapsulates a packet and immediately re-encapsulates it for the next
        tunnel <bcp14>MAY</bcp14> copy the incoming outer ECN field directly
        to the outgoing outer and the incoming inner ECN field directly to the
        outgoing inner. Then, the overall behavior across the sequence of
        tunnel segments would still be consistent with <xref target="RFC6040"/>.</t>
        <t><xref target="RFC6040" sectionFormat="of" section="C"/> describes how a tunnel egress can monitor how
        much congestion has been introduced within a tunnel. A network
        operator might want to monitor how much congestion had been introduced
        within a whole sequence of tunnels. Using the technique in 
        <xref target="RFC6040" sectionFormat="of" section="C"/> at the final egress, the operator could monitor the whole
        sequence of tunnels, but only if the above optimization were used
        consistently along the sequence of tunnels, in order to make it appear
        as a single tunnel. Therefore, tunnel endpoint implementations <bcp14>SHOULD</bcp14>
        allow the operator to configure whether this optimization is
        enabled.</t>
        <t>When congestion notification support is added to a subnet technology, consideration
        <bcp14>SHOULD</bcp14> be given to a similar optimization between subnets in sequence
        if they all use the same technology.</t>
      </section>
      <section anchor="ecnencap_Reframing" numbered="true" toc="default">
        <name>Reframing and Congestion Markings</name>
        <t>The guidance in this section is worded in terms of framing
        boundaries, but it applies equally whether the PDUs are
        frames, cells, or packets.</t>
        <t>Where an AQM marks the ECN field of IP packets as they queue into a
        Layer 2 link, there will be no problem with framing boundaries
        because the ECN markings would be applied directly to IP packets. The
        guidance in this section is only applicable where a congestion notification capability is
        being added to a Layer 2 protocol so that Layer 2 frames can be
        marked by an AQM at layer 2. This would only be necessary where
        AQM will be applied at pure Layer 2 nodes (without IP awareness).</t>
        <t>Where congestion marking has had to be applied at non-IP-aware nodes and
        framing boundaries do not necessarily align with packet boundaries,
        the decapsulating IP forwarding node <bcp14>SHOULD</bcp14> propagate congestion markings
        from Layer 2 frame headers to IP packets that may have different
        boundaries as a consequence of reframing.</t>
<!-- [rfced] For the design goals below, may we rephrase and format the list
as follows for clarity? We note that this section later refers to these
goals as "goal 1" and "goal 2", but the list originally notes these goals
as 1a and 1b.

Original:
   Two possible design goals for propagating congestion indications,
   described in Section 5.3 of [RFC3168] and Section 2.4 of [RFC7141],
   are:

   1.  approximate preservation of the presence (and therefore timing)
       of congestion marks on the L2 frames used to construct an IP
       packet;

       a.  at high frequency of congestion marking, approximate
           preservation of the proportion of congestion marks arriving
           and departing;

       b.  at low frequency of congestion marking, approximate
           preservation of the timing of congestion marks arriving and
           departing.

Perhaps: 
   Two possible design goals for propagating congestion indications,
   described in Section 5.3 of [RFC3168] and Section 2.4 of [RFC7141], are:

   1.  approximate preservation of the presence (and therefore timing) of
       congestion marks on the L2 frames used to construct an IP packet; and

   2.  approximate preservation of the proportion and timing at a high 
       and low frequency of congestion, respectively, of congestion marks 
       arriving and departing.
-->
        <t>Two possible design goals for propagating congestion indications,
        described in <xref section="5.3" target="RFC3168" format="default"/> and <xref section="2.4" target="RFC7141" format="default"/>, are:</t>

        <ol spacing="normal" type="1"><li anchor="ecnencap_reframing_goal_presence">approximate
            preservation of the presence (and therefore timing) of congestion
            marks on the L2 frames used to construct an IP packet;</li>
          <li anchor="ecnencap_reframing_goal_proportion">
            <ol spacing="normal" type="a"><li>at high frequency of congestion marking, approximate
                preservation of the proportion of congestion marks arriving
                and departing;</li>
              <li>at low frequency of congestion marking, approximate
                preservation of the timing of congestion marks arriving and
                departing.</li>
            </ol>
          </li>
        </ol>
        <t>In either case, an implementation <bcp14>SHOULD</bcp14> ensure that any new
        incoming congestion indication is propagated immediately and not held
        awaiting the possibility of further congestion indications to be
        sufficient to indicate congestion on an outgoing PDU <xref target="RFC7141" format="default"/>. Nonetheless, to facilitate pipelined
        implementation, it would be acceptable for congestion marks to
        propagate to a slightly later IP packet.</t>
        <t>
   At decapsulation in either case, ECN-marking propagation logically occurs
   before application of Decapsulation Guideline <xref format="counter"
   target="ecnencap_dropNot-ECTinnerCEouter"/> in <xref
   target="ecnencap_DecapGuidelines" format="default"/>.
<!-- [rfced] For the following unordered list, we have reformatted the list
items below for readability (as it seems the last two list items were
intended to be sub-points of the first list item). Please review and let
us know any any further changes.

Original:
   At decapsulation in either case:

   *  ECN marking propagation logically occurs before application of
      Decapsulation Guideline 1 in Section 4.4.  For instance, if ECN
      marking propagation would cause an ECN congestion indication to be
      applied to an IP packet that is a Not-ECN-PDU, then that IP packet
      is dropped in accordance with Guideline 1;

   *  where a mix of ECN-PDUs and non-ECN-PDUs arrives to construct the
      same IP packet, the decapsulation spec SHOULD require that packet
      to be discarded.

   *  where a mix of different types of ECN-PDUs arrives to construct
      the same IP packet, e.g. a mix of frames that map to ECT(0) and
      ECT(1) IP packets, the decapsulation spec might consider this a
      protocol error.  But, if the lower layer protocol has defined such
      a mix of types of ECN-PDU as valid, it SHOULD require the
      resulting IP packet to be set to either ECT(0) or ECT(1).  In this
      case, it SHOULD take into account that the RFC series has so far
      allowed ECT(0) and ECT(1) to be considered equivalent [RFC3168],
      or ECT(1) can provide a less severe congestion marking than CE
      [RFC6040], or ECT(1) can indicate an unmarked but ECN-capable
      packet that is subject to a different marking algorithm to ECT(0)
      packets, for example L4S [RFC8311] [RFC9331].

Current:
   At decapsulation in either case, ECN-marking propagation logically
   occurs before application of Decapsulation Guideline 1 in
   Section 4.4.  For instance, if ECN marking propagation would cause an
   ECN congestion indication to be applied to an IP packet that is a
   Not-ECN-PDU, then that IP packet is dropped in accordance with
   Guideline 1:

   *  where a mix of ECN-PDUs and non-ECN-PDUs arrives to construct the
      same IP packet, the decapsulation spec SHOULD require that packet
      to be discarded.

   *  where a mix of different types of ECN-PDUs arrives to construct
      the same IP packet, e.g., a mix of frames that map to ECT(0) and
      ECT(1) IP packets, the decapsulation specification might consider this a
      protocol error.  But, if the lower-layer protocol has defined such
      a mix of types of ECN-PDU as valid, it SHOULD require the
      resulting IP packet to be set to either ECT(0) or ECT(1).  In this
      case, it SHOULD take into account that the RFC Series has so far
      allowed ECT(0) and ECT(1) to be considered equivalent [RFC3168];
      otherwise, ECT(1) can provide a less severe congestion marking
      than CE [RFC6040] or ECT(1) can indicate an unmarked but ECN-
      capable packet that is subject to a different marking algorithm to
      ECT(0) packets, e.g., L4S [RFC8311] [RFC9331].
-->
For instance, if ECN-marking
            propagation would cause an ECN congestion indication to be applied
            to an IP packet that is a Not-ECN-PDU, then that IP packet is
            dropped in accordance with Guideline <xref format="counter" target="ecnencap_dropNot-ECTinnerCEouter"/>:</t>
<ul>
          <li>where a mix of ECN-PDUs and non-ECN-PDUs arrives to construct the same
            IP packet, the decapsulation specification <bcp14>SHOULD</bcp14> require that packet to
            be discarded.</li>
          <li>where a mix of different types of ECN-PDUs arrives to construct the
            same IP packet, e.g., a mix of frames that map to ECT(0) and ECT(1) IP packets,
            the decapsulation specification might consider this a protocol error. But, if
            the lower-layer protocol has defined such a mix of types of ECN-PDU as valid, it <bcp14>SHOULD</bcp14>
            require the resulting IP packet to be set to either ECT(0) or ECT(1).
            In this case, it <bcp14>SHOULD</bcp14> take into account that the RFC Series has so
            far allowed ECT(0) and ECT(1) to be considered
            equivalent <xref target="RFC3168" format="default"/>; otherwise, ECT(1) can
            provide a less severe congestion marking
            than CE <xref target="RFC6040" format="default"/> or ECT(1) can
            indicate an unmarked but ECN-capable packet that is subject to a
            different marking algorithm to ECT(0) packets, e.g., L4S
            <xref target="RFC8311" format="default"/> <xref target="RFC9331" format="default"/>.</li></ul>
        <t>The following are two ways that goal <xref format="counter" target="ecnencap_reframing_goal_presence"/> might be achieved, but
        they are not intended to be the only ways:</t>
        <ul spacing="normal">
          <li>Every IP PDU that is constructed, in whole or in part, from an
            L2 frame that is marked with a congestion signal has that signal
            propagated to it.</li>
          <li>Every L2 frame that is marked with a congestion signal
            propagates that signal to one IP PDU that is constructed from it in
            whole or in part. If multiple IP PDUs meet this
            description, the choice can be made arbitrarily but ought to be
            consistent.</li>
        </ul>
        <t>The following gives one way that goal <xref format="counter" target="ecnencap_reframing_goal_proportion"/> might be achieved, but
        it is not intended to be the only way:</t>
        <ul spacing="normal">
          <li>For each of the streams of frames that encapsulate the IP packets of
            each IP-ECN codepoint and follow the same path through the subnet,
            a counter ('in') tracks octets arriving
            within the payload of marked L2 frames and another ('out') tracks
            octets departing in marked IP packets. While 'in' exceeds 'out',
            forwarded IP packets are ECN-marked. If 'out' exceeds 'in' for
            longer than a timeout, both counters are zeroed to ensure that
            the start of the next congestion episode propagates immediately.
            The 'out' counter includes octets in reconstructed IP packets that
            would have been marked, but had to be dropped because they were
            Not-ECN-PDUs (by Decapsulation Guideline <xref format="counter" target="ecnencap_dropNot-ECTinnerCEouter"/> in <xref target="ecnencap_DecapGuidelines" format="default"/>).</li>
        </ul>
        <t>Generally, the number of L2 frames may be higher (e.g., ATM) than,
        similar to, or lower (e.g., 802.11 aggregation at an L2-only station)
        than the number of IP PDUs; this distinction may influence the
        choice of mechanism.</t>
      </section>
    </section>
    <section anchor="ecnencap_Guidelines_Up" numbered="true" toc="default">
      <name>Feed-Up-and-Forward Mode: Guidelines for Adding Congestion Notification</name>
      <t>The guidance in this section is applicable, for example, when IP
      packets:</t>
      <ul spacing="normal">
        <li>are encapsulated in Ethernet headers, which have no support for
          congestion notification;</li>
        <li>are forwarded by the eNode-B (base station) of a 3GPP radio access
        network, which is required to apply ECN marking during congestion
        <xref target="LTE-RA" format="default"/> <xref target="UTRAN"
        format="default"/>, but the Packet Data Convergence Protocol (PDCP)
        that encapsulates the IP header over the radio access has no support
        for ECN.</li> </ul> <t>This guidance also generalizes to encapsulation
        by other subnet technologies with no native support for congestion notification at the
        lower layer, but with support for finding and processing an IP
        header. It is unlikely to be applicable or necessary for IP-in-IP
        encapsulation, where feed-forward-and-up mode based on <xref
        target="RFC6040" format="default"/> would be more appropriate.</t>
      <t>Marking the IP header while switching at layer 2 (by using a Layer 3
      switch) or while forwarding in a radio access network seems to represent
      a layering violation. However, it can be considered as a benign
      optimization if the guidelines below are followed. Feed-up-and-forward
      is certainly not a general alternative to implementing feed-forward
      congestion notification in the lower layer, because:</t>
      <ul spacing="normal">
        <li>IPv4 and IPv6 are not the only Layer 3 protocols that might be
          encapsulated by lower-layer protocols.</li>
        <li>Link-layer encryption might be in use, making the Layer 2 payload
          inaccessible.</li>
        <li>Many Ethernet switches do not have 'Layer 3 switch' capabilities,
          so they cannot read or modify an IP payload.</li>
        <li>It might be costly to find an IP header (IPv4 or IPv6) when it may be
          encapsulated by more than one lower-layer header, e.g., Ethernet MAC
          in MAC (<xref target="IEEE802.1Q" format="default"/>; previously 802.1ah).</li>
      </ul>
      <t>Nonetheless, configuring lower-layer equipment to look for an ECN
      field in an encapsulated IP header is a useful optimization. If the
      implementation follows the guidelines below, this optimization does not
      have to be confined to a controlled environment, e.g., within a data
      centre; it could usefully be applied on any network -- even if the
      operator is not sure whether the above issues will never apply:</t>
      <ol spacing="normal" type="1"><li>If a native lower-layer congestion notification mechanism exists
          for a subnet technology, it is safe to mix feed-up-and-forward with
          feed-forward-and-up on other switches in the same subnet. However,
          it will generally be more efficient to use the native mechanism.</li>
        <li>The depth of the search for an IP header <bcp14>SHOULD</bcp14> be limited. If an
          IP header is not found soon enough, or an unrecognized or unreadable
          header is encountered, the switch <bcp14>SHOULD</bcp14> resort to an alternative
          means of signalling congestion (e.g., drop or the native lower-layer
          mechanism if available).</li>
        <li>It is sufficient to use the first IP header found in the stack;
          the egress of the relevant tunnel can propagate congestion
          notification upwards to any more deeply encapsulated IP headers
          later.</li>
      </ol>
    </section>
    <section anchor="ecnencap_Guidelines_Backward" numbered="true" toc="default">
      <name>Feed-Backward Mode: Guidelines for Adding Congestion Notification</name>
      <t>It can be seen from <xref target="ecnencap_Backward" format="default"/> that
      congestion notification in a subnet using feed-backward mode have
      generally not been designed to be directly coupled with IP-layer
      congestion notification. The subnet attempts to minimize congestion
      internally, and if the incoming load at the ingress exceeds the capacity
      somewhere through the subnet, the Layer 3 buffer into the ingress backs
      up. Thus, a feed-backward mode subnet is in some sense similar to a null
      mode subnet, in that there is no need for any direct interaction between
      the subnet and higher-layer congestion notification. Therefore, no
      detailed protocol design guidelines are appropriate. Nonetheless, a more
      general guideline is appropriate: </t>
        <blockquote>A subnetwork technology intended to eventually interface
        to IP <bcp14>SHOULD NOT</bcp14> be designed using only the
        feed-backward mode, which is certainly best for a stand-alone subnet,
        but would need to be modified to work efficiently as part of the wider
        Internet because IP uses feed-forward-and-up mode.</blockquote>
      <t>The feed-backward approach at least works beneath IP, where the term
      'works' is used only in a narrow functional sense because feed-backward
      can result in very inefficient and sluggish congestion control --
      except if it is confined to the subnet directly connected to the
      original data source when it is faster than feed-forward. It would be
      valid to design a protocol that could work in feed-backward mode for
      paths that only cross one subnet, and in feed-forward-and-up mode for
      paths that cross subnets.</t>
      <t>In the early days of TCP/IP, a similar feed-backward approach was
      tried for explicit congestion signalling using source-quench (SQ) ICMP
      control packets. However, SQ fell out of favour and is now formally
      deprecated <xref target="RFC6633" format="default"/>. The main problem was that it is
      hard for a data source to tell the difference between a spoofed SQ
      message and a quench request from a genuine buffer on the path. It is
      also hard for a lower-layer buffer to address an SQ message to the
      original source port number, which may be buried within many layers of
      headers and possibly encrypted.</t>
      <t>QCN (also known as Backward Congestion Notification (BCN); see
      Sections 30-33 of <xref target="IEEE802.1Q" format="default"/>, previously known as
      802.1Qau) uses a feed-backward mode that is structurally similar to ATM's
      relative rate mechanism. However, QCN confines its applicability to
      scenarios such as some data centres where all endpoints are directly
      attached by the same Ethernet technology. If a QCN subnet were later
      connected into a wider IP-based internetwork (e.g., when attempting to
      interconnect multiple data centres) it would suffer the inefficiency
      shown in <xref target="ecnencap_Fig_Feed-Backward" format="default"/>.</t>
    </section>
    <section anchor="ecnencap_IANA_Considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>This document has no IANA actions.</t>
    </section>
    <section anchor="ecnencap_Security_Considerations" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>If a lower-layer wire protocol is redesigned to include explicit
      congestion signalling in-band in the protocol header, care <bcp14>SHOULD</bcp14> be
      taken to ensure that the field used is specified as mutable during
      transit. Otherwise, interior nodes signalling congestion would invalidate
      any authentication protocol applied to the lower-layer header -- by
      altering a header field that had been assumed as immutable.</t>
      <t>The redesign of protocols that encapsulate IP in order to propagate
      congestion signals between layers raises potential signal integrity
      concerns. Experimental or proposed approaches exist for assuring the
      end-to-end integrity of in-band congestion signals, such as:</t>
      <ul spacing="normal">
        <li>Congestion exposure (ConEx) for networks to audit that their
          congestion signals are not being suppressed by other networks or by
          receivers, and to police that senders are responding
          sufficiently to the signals, irrespective of the L4 transport
          protocol used <xref target="RFC7713" format="default"/>.</li>
        <li>A test for a sender to detect whether a network or the receiver
          is suppressing congestion signals (for example, see the second paragraph of <xref section="20.2" target="RFC3168" format="default"/>).</li>
      </ul>
      <t>Given these end-to-end approaches are already being specified,
      it would make little sense to attempt to design hop-by-hop congestion
      signal integrity into a new lower-layer protocol because end-to-end
      integrity inherently achieves hop-by-hop integrity.</t>
      <t><xref target="ecnencap_Guidelines_Backward" format="default"/> gives vulnerability to
      spoofing as one of the reasons for deprecating feed-backward mode.</t>
    </section>
    <section anchor="ecnencap_Conclusions" numbered="true" toc="default">
      <name>Conclusions</name>
      <t>Following the guidance in this document enables ECN support to be
      extended consistently to numerous protocols that encapsulate IP (IPv4 and
      IPv6) so that IP continues to fulfil its role as an end-to-end
      interoperability layer. This includes:</t>
      <ul spacing="normal">
        <li>A wide range of tunnelling protocols, including those with various
          forms of a shim header between two IP headers, possibly also separated
          by an L2 header;</li>
        <li>A wide range of subnet technologies, particularly those that work
          in the same 'feed-forward-and-up' mode that is used to support ECN
          in IP and MPLS.</li>
      </ul>
      <t>Guidelines have been defined for supporting propagation of ECN
      between Ethernet and IP on so-called Layer 3 Ethernet switches using a
      'feed-up-and-forward' mode. This approach could enable other subnet
      technologies to pass ECN signals into the IP layer, even if they do not
      support ECN natively.</t>
      <t>Finally, attempting to add congestion notification to a subnet technology in
      feed-backward mode is deprecated except in special cases due to its
      likely sluggish response to congestion.</t>
    </section>
  </middle>
  <back>

    <displayreference target="I-D.ietf-intarea-gue" to="INTAREA-GUE"/>

    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>

	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3168.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3819.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4774.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5129.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6040.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7141.xml"/>

<!-- [I-D.ietf-trill-ecn-support] REF state as of 04/29/2024; companion doc RFC9600 -->
<reference anchor="RFC9600" target="https://www.rfc-editor.org/info/rfc9600">
<front>
<title>
TRILL (TRansparent Interconnection of Lots of Links): ECN (Explicit Congestion Notification) Support
</title>
<author initials="D." surname="Eastlake" fullname="Donald E. Eastlake 3rd">
<organization>Huawei</organization>
</author>
<author initials="B." surname="Briscoe" fullname="Bob Briscoe">
<organization>CableLabs</organization>
</author>
<date month="June" year="2024"/>
</front>
<seriesInfo name="RFC" value="9600"/>
<seriesInfo name="DOI" value="10.17487/RFC9600"/>
</reference>

      </references>
      <references>
        <name>Informative References</name>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2003.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2473.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2637.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2661.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2784.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2884.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2983.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3931.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4301.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4380.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5415.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6633.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6660.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7323.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7348.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7780.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7567.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7637.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7713.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8084.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8087.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8257.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8300.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8311.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8926.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9300.xml"/>
	<xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9331.xml"/>

<!-- [I-D.ietf-intarea-gue] IESG State: Expired (IESG: Dead) as of 02/12/2024-->
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/draft-ietf-intarea-gue.xml"/>

<!-- [I-D.ietf-tsvwg-rfc6040update-shim] REF state as of 04/29/2024; companion doc RFC9601-->
<reference anchor="RFC9601" target="https://www.rfc-editor.org/info/rfc9601">
<front>
<title>
Propagating Explicit Congestion Notification Across IP Tunnel Headers Separated by a Shim
</title>
<author initials="B." surname="Briscoe" fullname="Bob Briscoe">
<organization>Independent</organization>
</author>
<date month="June" year="2024"/>
</front>
<seriesInfo name="RFC" value="9601"/>
<seriesInfo name="DOI" value="10.17487/RFC9601"/>
</reference>

        <reference anchor="IEEE802.1Q">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Network--Bridges and Bridged Networks</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date month="July" year="2018"/>
          </front>
          <seriesInfo name="IEEE Std" value="802.1Q-2018"/>
	  <seriesInfo name="DOI" value="10.1109/IEEESTD.2018.8403927"/>
        </reference>

      <reference anchor="ITU-T.I.371" target="https://www.itu.int/rec/T-REC-I.371-200403-I/en">
          <front>
            <title>Traffic control and congestion control in B-ISDN</title>
            <author fullname="" initials="" surname="">
              <organization>ITU-T</organization>
            </author>
            <date month="March" year="2004"/>
          </front>
          <seriesInfo name="ITU-T Recommendation" value="I.371"/>
        </reference>

      <reference anchor="Buck00">
          <front>
            <title>Frame Relay: Technology and Practice</title>
            <author fullname="Jeff T. Buckwalter" initials="J.T." surname="Buckwalter">
              <organization/>
            </author>
            <date year="2000"/>
          </front>
	  <seriesInfo name="ISBN-13" value="978-0201485240"/>
	  <refcontent>Addison-Wesley Professional</refcontent>
        </reference>


        <reference anchor="GTPv1">
          <front>
            <title>General Packet Radio Service (GPRS); GPRS Tunnelling
            Protocol (GTP) across the Gn and Gp interface</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date/>
          </front>
          <seriesInfo name="Technical Specification" value="29.060"/>
        </reference>

        <reference anchor="GTPv1-U">
          <front>
            <title>General Packet Radio System (GPRS) Tunnelling Protocol User
          Plane (GTPv1-U)</title>
            <author>
              <organization>3GPP</organization>
            </author>
          </front>
          <seriesInfo name="Technical Specification" value="29.281"/>
        </reference>

        <reference anchor="LTE-RA">
          <front>
            <title>Evolved Universal Terrestrial Radio Access (E-UTRA) and
          Evolved Universal Terrestrial Radio Access Network (E-UTRAN);
          Overall description; Stage 2</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date/>
          </front>
          <seriesInfo name="Technical Specification" value="36.300"/>
        </reference>

        <reference anchor="UTRAN">
          <front>
            <title>UTRAN overall description</title>
            <author>
              <organization>3GPP</organization>
            </author>
          </front>
          <seriesInfo name="Technical Specification" value="25.401"/>
        </reference>

        <reference anchor="GTPv2-C">
          <front>
            <title>3GPP Evolved Packet System (EPS); Evolved General Packet
            Radio Service (GPRS) Tunnelling Protocol for Control plane
            (GTPv2-C); Stage 3</title>
            <author>
              <organization>3GPP</organization>
            </author>
          </front>
          <seriesInfo name="Technical Specification" value="29.274"/>
        </reference>

        <reference anchor="ATM-TM-ABR" target="https://www.cisco.com/c/en/us/support/docs/asynchronous-transfer-mode-atm/atm-traffic-management/10415-atmabr.html">
          <front>
            <title>Understanding the Available Bit Rate (ABR) Service Category
          for ATM VCs</title>
            <author>
              <organization>Cisco</organization>
            </author>
            <date month="June" year="2005"/>
          </front>
          <seriesInfo name="Design Technote" value="10415"/>
        </reference>

        <reference anchor="Leiserson85">
          <front>
            <title>Fat-trees: Universal networks for hardware-efficient
          supercomputing</title>
            <author fullname="Charles E. Leiserson" initials="C.E." surname="Leiserson">
              <organization/>
            </author>
            <date month="October" year="1985"/>
          </front>
	  <seriesInfo name="DOI" value="10.1109/TC.1985.6312192"/>
	  <refcontent>IEEE Transactions on Computers, Vol. C-34, Issue 10</refcontent>
        </reference>

        <reference anchor="Clos53">
          <front>
            <title>A Study of Non-Blocking Switching Networks</title>
            <author fullname="Charles Clos" initials="C." surname="Clos">
            </author>
            <date month="March" year="1953"/>
          </front>
	  <seriesInfo name="DOI" value="10.1002/j.1538-7305.1953.tb01433.x"/>
<refcontent>The Bell System Technical Journal, Vol. 32, Issue 2</refcontent>
        </reference>

      </references>
    </references>

    <section anchor="ecnencap_Acknowledgements" numbered="false" toc="default">
      <name>Acknowledgements</name>
      <t>Thanks to <contact fullname="Gorry Fairhurst"/> and <contact
      fullname="David Black"/> for extensive reviews.  Thanks also to the
      following reviewers: <contact fullname="Joe Touch"/>, <contact
      fullname="Andrew McGregor"/>, <contact fullname="Richard
      Scheffenegger"/>, <contact fullname="Ingemar Johansson"/>, <contact
      fullname="Piers O'Hanlon"/>, <contact fullname="Donald Eastlake 3rd"/>,
      <contact fullname="Jonathan Morton"/>, <contact fullname="Markku
      Kojo"/>, <contact fullname="Sebastian Möller"/>, <contact
      fullname="Martin Duke"/>, and <contact fullname="Michael Welzl"/>, who
      pointed out that lower-layer congestion notification signals may have
      different semantics to those in IP. Thanks are also due to the Transport and Services Working Group (tsvwg)
      chairs, TSV ADs and IETF liaison people such as <contact fullname="Eric
      Gray"/>, <contact fullname="Dan Romascanu"/> and <contact
      fullname="Gonzalo Camarillo"/> for helping with the liaisons with the
      IEEE and 3GPP. And thanks to <contact fullname="Georg Mayer"/> and
      particularly to <contact fullname="Erik Guttman"/> for the extensive
      search and categorisation of any 3GPP specifications that cite ECN
      specifications. Thanks also to the Area Reviewers <contact fullname="Dan
      Harkins"/>, <contact fullname="Paul Kyzivat"/>, <contact fullname="Sue
      Hares"/>, and <contact fullname="Dale Worley"/>.</t>
      <t><contact fullname="Bob Briscoe"/> was part-funded by the European
      Community under its Seventh Framework Programme through the Trilogy
      project (ICT-216372) and the Reducing Internet Transport Latency (RITE)
      project (ICT-317700) for earlier draft versions of this document. For
      later draft versions of this document, he was funded by Apple Inc. The
      views expressed here are solely those of the authors.</t>
    </section>
    <section numbered="false" toc="default">
      <name>Contributors</name>
<contact fullname="Pat Thaler">
<organization>Broadcom Corporation (retired)</organization>
<address>
<postal>
<region>CA</region>    
<country>United States of America</country></postal>
</address>
</contact>
      <t>Pat was a coauthor of this draft, but retired before its
      publication.</t>
    </section>
  </back>
<!-- [rfced] FYI, we have added expansions for abbreviations upon first use
per Section 3.6 of RFC 7322 ("RFC Style Guide"). Please review each
expansion in the document carefully to ensure correctness.
-->


<!-- [rfced] Please review the "Inclusive Language" portion of the online
Style Guide <https://www.rfc-editor.org/styleguide/part2/#inclusive_language>
and let us know if any changes are needed. For example, please consider 
whether the term "native" should be updated.
--> 

</rfc>
